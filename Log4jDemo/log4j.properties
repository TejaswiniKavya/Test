# initialize root logger with level DEBUG for stdout and fout
log4j.rootLogger=DEBUG,stdout,fout 

# set the log level for these components
log4j.logger.com.endeca=INFO
log4j.logger.com.endeca.itl.web.metrics=INFO

# add a ConsoleAppender to the logger stdout to write to the console
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout

# use a simple message format
log4j.appender.stdout.layout.ConversionPattern=%m%n

# add a FileAppender to the logger fout
log4j.appender.fout=org.apache.log4j.FileAppender

# create a log file
log4j.appender.fout.File=crawl.log
log4j.appender.fout.layout=org.apache.log4j.PatternLayout

# use a more detailed message pattern
log4j.appender.fout.layout.ConversionPattern=%p\t%d{ISO8601}\t%r\t%c\t[%t]\t%m%n


#DEBUG designates fine-grained informational events that are most useful to debug a crawl configuration.
#TRACE designates fine-grained informational events than DEBUG.
#ERROR designates error events that might still allow the crawler to continue running.
#FATAL designates very severe error events that will presumably lead the crawler to abort.
#INFO designates informational messages that highlight the progress of the crawl at a coarse-grained level.
#OFF has the highest possible rank and is intended to turn off logging.
#WARN designates potentially harmful situations.

#log4j.rootLogger=DEBUG,stdout,fout //it gives debug.info,warn,error,fatal
#log4j.rootLogger=InFO,stdout,fout //ignores debug.it gives info,warn,error,fatal
#log4j.rootLogger=WARN,stdout,fout //ignores debug,info,it gives warn,error,fatal
#log4j.rootLogger=ERROR,stdout,fout //ignores debug,info,warn,it gives error,fatal
#log4j.rootLogger=FATAL,stdout,fout //it gives only fatal ignores all other

#--------layout-----
#log4j.appender.stdout.layout=org.apache.log4j.HTMLLayout    # we have so many layout like HTMLLayout, PatternLayout, SimpleLayout,XMLLayout,DateLayout